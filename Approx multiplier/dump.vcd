$date
	Thu Mar 16 15:49:02 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb $end
$var wire 32 ! out [31:0] $end
$var reg 16 " A [15:0] $end
$var reg 16 # B [15:0] $end
$scope module X $end
$var wire 16 $ A [15:0] $end
$var wire 16 % B [15:0] $end
$var wire 32 & Ynew [31:0] $end
$var wire 32 ' Y [31:0] $end
$var wire 16 ( Bnew [15:0] $end
$var wire 16 ) Anew [15:0] $end
$scope module Ab $end
$var wire 16 * A [15:0] $end
$var reg 16 + Y [15:0] $end
$upscope $end
$scope module Ac $end
$var wire 16 , A [15:0] $end
$var reg 16 - Y [15:0] $end
$upscope $end
$scope module Ad $end
$var wire 16 . A [15:0] $end
$var wire 16 / B [15:0] $end
$var wire 1 0 selA $end
$var wire 1 1 selB $end
$var wire 4 2 xs1B [3:0] $end
$var wire 4 3 xs1A [3:0] $end
$var wire 4 4 shiftB [3:0] $end
$var wire 4 5 shiftA [3:0] $end
$var wire 16 6 Yuncorr [15:0] $end
$var wire 32 7 Y [31:0] $end
$var wire 5 8 Fshift [4:0] $end
$var wire 16 9 Bnew [15:0] $end
$var wire 16 : Anew [15:0] $end
$var reg 3 ; peA [2:0] $end
$var reg 3 < peB [2:0] $end
$upscope $end
$scope module Ae $end
$var wire 32 = A [31:0] $end
$var wire 1 > M $end
$var wire 1 ? N $end
$var reg 32 @ Y [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b11100111100111000110000000000000 @
0?
1>
b11000011000111010000000000000 =
b110 <
b101 ;
b11000111 :
b11111011 9
b1101 8
b11000011000111010000000000000 7
b1100001100011101 6
b110 5
b111 4
b110 3
b111 2
11
10
b111110111100101 /
b11000111010011 .
b111110111100101 -
b111110111100101 ,
b11000111010011 +
b1100111000101101 *
b11000111010011 )
b111110111100101 (
b11100111100111000110000000000000 '
b11000011000111010000000000000 &
b111110111100101 %
b1100111000101101 $
b111110111100101 #
b1100111000101101 "
b11100111100111000110000000000000 !
$end
#5
b11111010000011110001000000000000 !
b11111010000011110001000000000000 '
b11111010000011110001000000000000 @
b1100 8
b110 4
b110 2
b101 <
b101111100001111000000000000 &
b101111100001111000000000000 7
b101111100001111000000000000 =
b101111100001111 6
b10011101 9
b10011101000011 (
b10011101000011 -
b10011101000011 /
b10011011 :
b10011011110111 )
b10011011110111 +
b10011011110111 .
1?
0>
b1101100010111101 #
b1101100010111101 %
b1101100010111101 ,
b10011011110111 "
b10011011110111 $
b10011011110111 *
#10
01
b0 4
b100 8
b100 5
b1 2
b0 <
b100 3
b11 ;
b1101010011100000000 &
b1101010011100000000 7
b1101010011100000000 =
b110101001110000 6
b1101010011100000000 !
b1101010011100000000 '
b1101010011100000000 @
b11010000 9
b11010000 (
b11010000 -
b11010000 /
b10000011 :
b100000111101 )
b100000111101 +
b100000111101 .
1>
b1111111100110000 #
b1111111100110000 %
b1111111100110000 ,
b1111011111000011 "
b1111011111000011 $
b1111011111000011 *
#15
